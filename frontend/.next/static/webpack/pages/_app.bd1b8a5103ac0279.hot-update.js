"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTitle: function() { return /* binding */ createTitle; },\n/* harmony export */   generatePaintings: function() { return /* binding */ generatePaintings; },\n/* harmony export */   getPaintings: function() { return /* binding */ getPaintings; },\n/* harmony export */   getReferences: function() { return /* binding */ getReferences; },\n/* harmony export */   getTitle: function() { return /* binding */ getTitle; },\n/* harmony export */   getTitles: function() { return /* binding */ getTitles; },\n/* harmony export */   initializeToken: function() { return /* binding */ initializeToken; },\n/* harmony export */   login: function() { return /* binding */ login; },\n/* harmony export */   register: function() { return /* binding */ register; },\n/* harmony export */   retryPainting: function() { return /* binding */ retryPainting; },\n/* harmony export */   setAccessToken: function() { return /* binding */ setAccessToken; },\n/* harmony export */   uploadReference: function() { return /* binding */ uploadReference; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\nconst API = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: \"http://localhost:3000\" || 0,\n    withCredentials: true\n});\nlet inMemoryToken = null;\n// Helper function to safely access localStorage\nconst getStorageItem = (key)=>{\n    if (true) {\n        return localStorage.getItem(key);\n    }\n    return null;\n};\nconst setStorageItem = (key, value)=>{\n    if (true) {\n        localStorage.setItem(key, value);\n    }\n};\nconst removeStorageItem = (key)=>{\n    if (true) {\n        localStorage.removeItem(key);\n    }\n};\nfunction setAccessToken(token) {\n    inMemoryToken = token;\n    if (token) {\n        API.defaults.headers.common[\"Authorization\"] = \"Bearer \".concat(token);\n        // Also store in localStorage for persistence\n        setStorageItem(\"accessToken\", token);\n    } else {\n        delete API.defaults.headers.common[\"Authorization\"];\n        removeStorageItem(\"accessToken\");\n    }\n}\n// Get token from localStorage on initialization\nfunction initializeToken() {\n    const token = getStorageItem(\"accessToken\");\n    if (token) {\n        setAccessToken(token);\n    }\n}\n// Initialize token when module loads (only in browser)\nif (true) {\n    initializeToken();\n}\n// Request interceptor to ensure token is always set\nAPI.interceptors.request.use((config)=>{\n    // If we have a token in memory, ensure it's set in headers\n    if (inMemoryToken) {\n        config.headers.Authorization = \"Bearer \".concat(inMemoryToken);\n    }\n    return config;\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Response interceptor for handling 401 errors\nAPI.interceptors.response.use((response)=>response, async (error)=>{\n    var _error_response;\n    // If it's a 401 error, clear token and redirect to login\n    if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n        setAccessToken(null);\n        // If we're in a browser environment, redirect to login\n        if (true) {\n            window.location.href = \"/login\";\n        }\n    }\n    return Promise.reject(error);\n});\n// Auth functions\nconst register = async (username, email, password)=>{\n    const response = await API.post(\"/api/auth/register\", {\n        username,\n        email,\n        password\n    });\n    return response.data;\n};\nconst login = async (email, password)=>{\n    const response = await API.post(\"/api/auth/login\", {\n        email,\n        password\n    });\n    return response.data;\n};\n// Title functions\nconst getTitles = async ()=>{\n    const response = await API.get(\"/api/titles\");\n    return response.data.titles || response.data || [];\n};\nconst createTitle = async (title, instructions)=>{\n    const response = await API.post(\"/api/titles\", {\n        title,\n        instructions\n    });\n    console.log(response.data);\n    return response.data;\n};\nconst getTitle = async (id)=>{\n    const response = await API.get(\"/api/titles/\".concat(id));\n    return response.data;\n};\n// Reference functions\nconst getReferences = async (titleId)=>{\n    const response = await API.get(\"/api/references/\".concat(titleId));\n    return response.data.references || response.data || [];\n};\nconst uploadReference = async (titleId, imageData, isGlobal)=>{\n    const response = await API.post(\"/api/references\", {\n        titleId,\n        imageData,\n        isGlobal\n    });\n    return response.data;\n};\n// Painting functions\nconst generatePaintings = async (titleId, count)=>{\n    const response = await API.post(\"/api/paintings/generate\", {\n        titleId,\n        count\n    });\n    return response.data;\n};\nconst getPaintings = async (titleId)=>{\n    if (!titleId) return [];\n    const response = await API.get(\"/api/paintings/\".concat(titleId));\n    // The response has { paintings: [...], referenceDataMap: {} }\n    // We need to return just the paintings array\n    return response.data.paintings || [];\n};\nconst retryPainting = async (paintingId)=>{\n    const response = await API.post(\"/api/paintings/\".concat(paintingId, \"/retry\"));\n    return response.data;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (API);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});